{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["export type NodeId = string;\nexport type EdgeWeight = number;\nexport type EncodedEdge = string;\n\nexport interface Serialized {\n  nodes: { id: NodeId }[];\n  links: { source: NodeId; target: NodeId; weight: EdgeWeight }[];\n}\n\nexport class CycleError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, CycleError.prototype);\n  }\n}\n\nexport function Graph(serialized?: Serialized) {\n  // Returned graph instance\n  const graph = {\n    addNode,\n    removeNode,\n    nodes,\n    adjacent,\n    addEdge,\n    removeEdge,\n    hasEdge,\n    setEdgeWeight,\n    getEdgeWeight,\n    indegree,\n    outdegree,\n    depthFirstSearch,\n    hasCycle,\n    lowestCommonAncestors,\n    topologicalSort,\n    shortestPath,\n    serialize,\n    deserialize,\n  };\n\n  // The adjacency list of the graph.\n  // Keys are node ids.\n  // Values are adjacent node id arrays.\n  const edges: Record<NodeId, NodeId[]> = {};\n\n  // The weights of edges.\n  // Keys are string encodings of edges.\n  // Values are weights (numbers).\n  const edgeWeights: Record<EncodedEdge, EdgeWeight> = {};\n\n  // If a serialized graph was passed into the constructor, deserialize it.\n  if (serialized) {\n    deserialize(serialized);\n  }\n\n  // Adds a node to the graph.\n  // If node was already added, this function does nothing.\n  // If node was not already added, this function sets up an empty adjacency list.\n  function addNode(node: NodeId) {\n    edges[node] = adjacent(node);\n    return graph;\n  }\n\n  // Removes a node from the graph.\n  // Also removes incoming and outgoing edges.\n  function removeNode(node: NodeId) {\n    // Remove incoming edges.\n    Object.keys(edges).forEach(function (u) {\n      edges[u].forEach(function (v) {\n        if (v === node) {\n          removeEdge(u, v);\n        }\n      });\n    });\n\n    // Remove outgoing edges (and signal that the node no longer exists).\n    delete edges[node];\n\n    return graph;\n  }\n\n  // Gets the list of nodes that have been added to the graph.\n  function nodes(): NodeId[] {\n    // TODO: Better implementation with set data structure\n    const nodeSet: Record<NodeId, boolean> = {};\n\n    Object.keys(edges).forEach(function (u) {\n      nodeSet[u] = true;\n      edges[u].forEach(function (v) {\n        nodeSet[v] = true;\n      });\n    });\n    return Object.keys(nodeSet);\n  }\n\n  // Gets the adjacent node list for the given node.\n  // Returns an empty array for unknown nodes.\n  function adjacent(node: NodeId): NodeId[] {\n    return edges[node] || [];\n  }\n\n  // Computes a string encoding of an edge,\n  // for use as a key in an object.\n  function encodeEdge(u: NodeId, v: NodeId): EncodedEdge {\n    return u + \"|\" + v;\n  }\n\n  // Sets the weight of the given edge.\n  function setEdgeWeight(u: NodeId, v: NodeId, weight: EdgeWeight) {\n    edgeWeights[encodeEdge(u, v)] = weight;\n    return graph;\n  }\n\n  // Gets the weight of the given edge.\n  // Returns 1 if no weight was previously set.\n  function getEdgeWeight(u: NodeId, v: NodeId): EdgeWeight {\n    const weight = edgeWeights[encodeEdge(u, v)];\n    return weight === undefined ? 1 : weight;\n  }\n\n  // Adds an edge from node u to node v.\n  // Implicitly adds the nodes if they were not already added.\n  function addEdge(u: NodeId, v: NodeId, weight?: EdgeWeight) {\n    addNode(u);\n    addNode(v);\n    adjacent(u).push(v);\n\n    if (weight !== undefined) {\n      setEdgeWeight(u, v, weight);\n    }\n\n    return graph;\n  }\n\n  // Removes the edge from node u to node v.\n  // Does not remove the nodes.\n  // Does nothing if the edge does not exist.\n  function removeEdge(u: NodeId, v: NodeId) {\n    if (edges[u]) {\n      edges[u] = adjacent(u).filter(function (_v) {\n        return _v !== v;\n      });\n    }\n    return graph;\n  }\n\n  // Returns true if there is an edge from node u to node v.\n  function hasEdge(u: NodeId, v: NodeId) {\n    return adjacent(u).includes(v);\n  }\n\n  // Computes the indegree for the given node.\n  // Not very efficient, costs O(E) where E = number of edges.\n  function indegree(node: NodeId) {\n    let degree = 0;\n    function check(v: NodeId) {\n      if (v === node) {\n        degree++;\n      }\n    }\n    Object.keys(edges).forEach(function (u) {\n      edges[u].forEach(check);\n    });\n    return degree;\n  }\n\n  // Computes the outdegree for the given node.\n  function outdegree(node: NodeId) {\n    return node in edges ? edges[node].length : 0;\n  }\n\n  // Depth First Search algorithm, inspired by\n  // Cormen et al. \"Introduction to Algorithms\" 3rd Ed. p. 604\n  // The additional option `includeSourceNodes` specifies whether to\n  // include or exclude the source nodes from the result (true by default).\n  // If `sourceNodes` is not specified, all nodes in the graph\n  // are used as source nodes.\n  function depthFirstSearch(\n    sourceNodes?: NodeId[],\n    includeSourceNodes: boolean = true,\n    errorOnCycle: boolean = false\n  ) {\n    if (!sourceNodes) {\n      sourceNodes = nodes();\n    }\n\n    if (typeof includeSourceNodes !== \"boolean\") {\n      includeSourceNodes = true;\n    }\n\n    const visited: Record<NodeId, boolean> = {};\n    const visiting: Record<NodeId, boolean> = {};\n    const nodeList: NodeId[] = [];\n\n    function DFSVisit(node: NodeId) {\n      if (visiting[node] && errorOnCycle) {\n        throw new CycleError(\"Cycle found\");\n      }\n      if (!visited[node]) {\n        visited[node] = true;\n        visiting[node] = true; // temporary flag while visiting\n        adjacent(node).forEach(DFSVisit);\n        visiting[node] = false;\n        nodeList.push(node);\n      }\n    }\n\n    if (includeSourceNodes) {\n      sourceNodes.forEach(DFSVisit);\n    } else {\n      sourceNodes.forEach(function (node) {\n        visited[node] = true;\n      });\n      sourceNodes.forEach(function (node) {\n        adjacent(node).forEach(DFSVisit);\n      });\n    }\n\n    return nodeList;\n  }\n\n  // Returns true if the graph has one or more cycles and false otherwise\n  function hasCycle(): boolean {\n    try {\n      depthFirstSearch(undefined, true, true);\n      // No error thrown -> no cycles\n      return false;\n    } catch (error) {\n      if (error instanceof CycleError) {\n        return true;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  // Least Common Ancestors\n  // Inspired by https://github.com/relaxedws/lca/blob/master/src/LowestCommonAncestor.php code\n  // but uses depth search instead of breadth. Also uses some optimizations\n  function lowestCommonAncestors(node1: NodeId, node2: NodeId) {\n    const node1Ancestors: NodeId[] = [];\n    const lcas: NodeId[] = [];\n\n    function CA1Visit(visited: Record<NodeId, boolean>, node: NodeId): boolean {\n      if (!visited[node]) {\n        visited[node] = true;\n        node1Ancestors.push(node);\n        if (node == node2) {\n          lcas.push(node);\n          return false; // found - shortcut\n        }\n        return adjacent(node).every((node) => {\n          return CA1Visit(visited, node);\n        });\n      } else {\n        return true;\n      }\n    }\n\n    function CA2Visit(visited: Record<NodeId, boolean>, node: NodeId) {\n      if (!visited[node]) {\n        visited[node] = true;\n        if (node1Ancestors.indexOf(node) >= 0) {\n          lcas.push(node);\n        } else if (lcas.length == 0) {\n          adjacent(node).forEach((node) => {\n            CA2Visit(visited, node);\n          });\n        }\n      }\n    }\n\n    if (CA1Visit({}, node1)) {\n      // No shortcut worked\n      CA2Visit({}, node2);\n    }\n\n    return lcas;\n  }\n\n  // The topological sort algorithm yields a list of visited nodes\n  // such that for each visited edge (u, v), u comes before v in the list.\n  // Amazingly, this comes from just reversing the result from depth first search.\n  // Cormen et al. \"Introduction to Algorithms\" 3rd Ed. p. 613\n  function topologicalSort(\n    sourceNodes?: NodeId[],\n    includeSourceNodes: boolean = true\n  ) {\n    return depthFirstSearch(sourceNodes, includeSourceNodes, true).reverse();\n  }\n\n  // Dijkstra's Shortest Path Algorithm.\n  // Cormen et al. \"Introduction to Algorithms\" 3rd Ed. p. 658\n  // Variable and function names correspond to names in the book.\n  function shortestPath(source: NodeId, destination: NodeId) {\n    // Upper bounds for shortest path weights from source.\n    const d: Record<NodeId, EdgeWeight> = {};\n\n    // Predecessors.\n    const p: Record<NodeId, NodeId> = {};\n\n    // Poor man's priority queue, keyed on d.\n    let q: Record<NodeId, boolean> = {};\n\n    function initializeSingleSource() {\n      nodes().forEach(function (node) {\n        d[node] = Infinity;\n      });\n      if (d[source] !== Infinity) {\n        throw new Error(\"Source node is not in the graph\");\n      }\n      if (d[destination] !== Infinity) {\n        throw new Error(\"Destination node is not in the graph\");\n      }\n      d[source] = 0;\n    }\n\n    // Adds entries in q for all nodes.\n    function initializePriorityQueue() {\n      nodes().forEach(function (node) {\n        q[node] = true;\n      });\n    }\n\n    // Returns true if q is empty.\n    function priorityQueueEmpty() {\n      return Object.keys(q).length === 0;\n    }\n\n    // Linear search to extract (find and remove) min from q.\n    function extractMin(): NodeId | null {\n      let min = Infinity;\n      let minNode;\n      Object.keys(q).forEach(function (node) {\n        if (d[node] < min) {\n          min = d[node];\n          minNode = node;\n        }\n      });\n      if (minNode === undefined) {\n        // If we reach here, there's a disconnected subgraph, and we're done.\n        q = {};\n        return null;\n      }\n      delete q[minNode];\n      return minNode;\n    }\n\n    function relax(u: NodeId, v: NodeId) {\n      const w = getEdgeWeight(u, v);\n      if (d[v] > d[u] + w) {\n        d[v] = d[u] + w;\n        p[v] = u;\n      }\n    }\n\n    function dijkstra() {\n      initializeSingleSource();\n      initializePriorityQueue();\n      while (!priorityQueueEmpty()) {\n        const u = extractMin();\n        if (u === null) return;\n        adjacent(u).forEach(function (v) {\n          relax(u as string, v);\n        });\n      }\n    }\n\n    // Assembles the shortest path by traversing the\n    // predecessor subgraph from destination to source.\n    function path() {\n      const nodeList: NodeId[] & { weight?: EdgeWeight } = [];\n      let weight = 0;\n      let node = destination;\n      while (p[node]) {\n        nodeList.push(node);\n        weight += getEdgeWeight(p[node], node);\n        node = p[node];\n      }\n      if (node !== source) {\n        throw new Error(\"No path found\");\n      }\n      nodeList.push(node);\n      nodeList.reverse();\n      nodeList.weight = weight;\n      return nodeList;\n    }\n\n    dijkstra();\n\n    return path();\n  }\n\n  // Serializes the graph.\n  function serialize() {\n    const serialized: Serialized = {\n      nodes: nodes().map(function (id) {\n        return { id: id };\n      }),\n      links: [],\n    };\n\n    serialized.nodes.forEach(function (node) {\n      const source = node.id;\n      adjacent(source).forEach(function (target) {\n        serialized.links.push({\n          source: source,\n          target: target,\n          weight: getEdgeWeight(source, target),\n        });\n      });\n    });\n\n    return serialized;\n  }\n\n  // Deserializes the given serialized graph.\n  function deserialize(serialized: Serialized) {\n    serialized.nodes.forEach(function (node) {\n      addNode(node.id);\n    });\n    serialized.links.forEach(function (link) {\n      addEdge(link.source, link.target, link.weight);\n    });\n    return graph;\n  }\n\n  // The returned graph instance.\n  return graph;\n}\n\nexport default Graph;\n"],"names":["CycleError","_Error","message","_this","call","Object","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","Graph","serialized","graph","addNode","removeNode","node","keys","edges","forEach","u","v","removeEdge","nodes","adjacent","addEdge","hasEdge","includes","setEdgeWeight","getEdgeWeight","indegree","degree","check","outdegree","length","depthFirstSearch","hasCycle","undefined","error","lowestCommonAncestors","node1","node2","node1Ancestors","lcas","CA1Visit","visited","push","every","CA2Visit","indexOf","topologicalSort","sourceNodes","includeSourceNodes","reverse","shortestPath","source","destination","d","p","q","Infinity","initializeSingleSource","_loop","minNode","min","w","relax","_ret","dijkstra","nodeList","weight","path","serialize","map","id","links","target","deserialize","edgeWeights","nodeSet","encodeEdge","filter","_v","errorOnCycle","visiting","DFSVisit","link"],"mappings":"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"}